{
	"": {
		"prefix": "alpha beta pruning",
		"body": [
		  "// Returns optimal value for",
		  "// current player(Initially called",
		  "// for root and maximizer)",
		  "int minimax(int depth, int nodeIndex,bool maximizingPlayer,vi values, int alpha,int beta)",
		  "{",
		  "     ",
		  "    // Terminating condition. i.e",
		  "    // leaf node is reached",
		  "    if (depth == 3)",
		  "        return values[nodeIndex];",
		  " ",
		  "    if (maximizingPlayer)",
		  "    {",
		  "        int best = MIN;",
		  " ",
		  "        // Recur for left and",
		  "        // right children",
		  "        for (int i = 0; i < 2; i++)",
		  "        {",
		  "             ",
		  "            int val = minimax(depth + 1, nodeIndex * 2 + i,false, values, alpha, beta);",
		  "            best = max(best, val);",
		  "            alpha = max(alpha, best);",
		  " ",
		  "            // Alpha Beta Pruning",
		  "            if (beta <= alpha)",
		  "                break;",
		  "        }",
		  "        return best;",
		  "    }",
		  "    else",
		  "    {",
		  "        int best = MAX;",
		  " ",
		  "        // Recur for left and",
		  "        // right children",
		  "        for (int i = 0; i < 2; i++)",
		  "        {",
		  "            int val = minimax(depth + 1, nodeIndex * 2 + i,true, values, alpha, beta);",
		  "            best = min(best, val);",
		  "            beta = min(beta, best);",
		  " ",
		  "            // Alpha Beta Pruning",
		  "            if (beta <= alpha)",
		  "                break;",
		  "        }",
		  "        return best;",
		  "    }",
		  "}"
		],
		"description": ""
	  }
}
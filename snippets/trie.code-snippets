{
	"": {
		"prefix": "trie",
		"body": [
		  "const int  m=11;",
		  "ll Trie[N][m];",
		  "ll nnode;",
		  "bool isword[N];",
		  "",
		  "void reset(int k){",
		  "    for(int i=0;i<m;i++){",
		  "        Trie[k][i]=-1;",
		  "    }",
		  "}",
		  "",
		  "void Insert(string &s){",
		  "    int n=SZ(s),node=0;",
		  "    for(int i=0;i<n;i++){",
		  "        if(Trie[node][s[i]-'0']==-1){",
		  "            Trie[node][s[i]-'0']=++nnode;",
		  "            reset(nnode);",
		  "        }",
		  "        node=Trie[node][s[i]-'0'];",
		  "    }",
		  "    isword[node]=1;",
		  "}",
		  "",
		  "string Search(string &s){",
		  "    // print(s);",
		  "    ll n=SZ(s),node=0;",
		  "    string res;",
		  "    for(int i=0;i<n;i++){",
		  "        pll temp={-1,-1};",
		  "        for(int j=0;j<10;j++){",
		  "            if(Trie[node][j]!=-1){",
		  "                if(temp.ff<((j+(s[i]-48))%10)){",
		  "                    temp={((j+s[i]-48)%10),j};",
		  "                }",
		  "            }",
		  "        }",
		  "        res.pb(temp.ss+48);",
		  "        node=Trie[node][temp.ss];",
		  "    }",
		  "    return res;",
		  "}",
		  ""
		],
		"description": ""
	  }
}
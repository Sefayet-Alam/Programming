{
	"": {
		"prefix": "mytemp(hashing)",
		"body": [
		  "#include<bits/stdc++.h>",
		  "#include<ext/pb_ds/assoc_container.hpp>",
		  "#include<ext/pb_ds/tree_policy.hpp>",
		  "using namespace __gnu_pbds;",
		  "using namespace std;",
		  "#define nn '\\n'",
		  "#define ff first",
		  "#define ss second",
		  "#define fo(i,n) for(i=0;i<n;i++)",
		  "#define Fo(i,k,n) for(i=k;k<n?i<n:i>n;k<n?i+=1:i-=1)",
		  "#define deb(x) cout << #x << \"=\" << x << endl",
		  "#define deb2(x, y) cout << #x << \"=\" << x << \",\" << #y << \"=\" << y << endl",
		  "#define pb push_back",
		  "#define eb emplace_back",
		  "#define mp make_pair",
		  "#define Setpre(n) cout<<fixed<<setprecision(n)",
		  "#define all(x) x.begin(), x.end()",
		  "#define rev(x) reverse(all(x))",
		  "#define sortall(x) sort(all(x))",
		  "#define UNIQUE(a) (a).erase(unique(all(a)),(a).end())",
		  "#define SZ(a) (int)a.size()",
		  "#define mem(a,b) memset(a,b,sizeof(a))",
		  "#define itr(it, a) for(auto it = a.begin(); it != a.end(); it++)",
		  "#define PI 3.1415926535897932384626",
		  "#define fast_IO ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)",
		  "#define Set(x, k) (x |= (1LL << k))",
		  "#define Unset(x, k) (x &= ~(1LL << k))",
		  "#define Check(x, k) (x & (1LL << k))",
		  "#define Toggle(x, k) (x ^ (1LL << k))",
		  "typedef long long ll;",
		  "typedef unsigned long long ull;",
		  "typedef pair<int, int>  pii;",
		  "typedef pair<ll, ll>    pll;",
		  "typedef vector<int>     vi;",
		  "typedef vector<ll>      vl;",
		  "typedef vector<pii>     vpii;",
		  "typedef vector<pll>     vpll;",
		  "typedef vector<vi>      vvi;",
		  "typedef vector<vl>      vvl;",
		  "template <typename T> void display (T const& coll){typename T::const_iterator pos;typename T::const_iterator end(coll.end());for(pos=coll.begin(); pos!=end; ++pos) cout << *pos << ' ';cout << endl;}",
		  "template <typename T> using PQ = priority_queue<T>;",
		  "template <typename T> using QP = priority_queue<T,vector<T>,greater<T>>;",
		  "template <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
		  "template <typename T> using ordered_multiset = tree<T, null_type,less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;",
		  "template <typename T,typename R> using ordered_map = tree<T, R , less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
		  "template <typename T,typename R> using ordered_multimap = tree<T, R , less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;",
		  "template <typename T> T BigMod (T b, T p, T m) {if (p == 0) return 1; if (p % 2 == 0) {T s = BigMod(b, p / 2, m); return ((s % m) * (s % m)) % m;} return ((b % m) * (BigMod(b, p - 1, m) % m)) % m;}",
		  "template <typename T> T ModInv (T b, T m) {return BigMod(b, m - 2, m);}",
		  "inline void swap(ll &x, ll &y) {ll temp = x; x = y; y = temp;}",
		  "inline ll GCD(ll a, ll b) { return b == 0 ? a : GCD(b, a % b); }",
		  "inline ll LCM(ll a, ll b) { return a * b / GCD(a, b); }",
		  "inline ll Ceil(ll p, ll q)  {return p < 0 ? p / q : p / q + !!(p % q);}",
		  "inline ll Floor(ll p, ll q) {return p > 0 ? p / q : p / q - !!(p % q);}",
		  "inline double logb(ll base,ll num){ return (double)log(num)/(double)log(base);}",
		  "inline bool isPerfectSquare(long double x){ if (x >= 0) { long long sr = sqrt(x);return (sr * sr == x); }return false; }",
		  "double euclidean_distance(ll x1,ll y1,ll x2,ll y2){double a=(x2-x1)*(x2-x1);double b=(y2-y1)*(y2-y1);double c=(double)sqrt(a+b);return c;}",
		  "int popcount(ll x){return __builtin_popcountll(x);};",
		  "int poplow(ll x){return __builtin_ctzll(x);};",
		  "int pophigh(ll x){return 63 - __builtin_clzll(x);};",
		  "mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
		  "int my_rand(int l, int r) {",
		  "    return uniform_int_distribution<int>(l, r) (rng);",
		  "}",
		  "struct custom_hash {",
		  "    static uint64_t splitmix64(uint64_t x) {",
		  "        x += 0x9e3779b97f4a7c15;",
		  "        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
		  "        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
		  "        return x ^ (x >> 31);",
		  "    }",
		  "    size_t operator()(uint64_t x) const {",
		  "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
		  "        return splitmix64(x + FIXED_RANDOM);",
		  "    }",
		  "};",
		  "const double EPS = 1e-9;",
		  "const int N = 2e5+10;",
		  "const int M = 1e9+7;",
		  "#define MAXLEN 1000010",
		  "",
		  "/*===================================================================//",
		  "                ███╗   ██╗ █████╗ ███████╗██╗███████╗",
		  "                ████╗  ██║██╔══██╗██╔════╝██║██╔════╝",
		  "                ██╔██╗ ██║███████║█████╗  ██║███████╗",
		  "                ██║╚██╗██║██╔══██║██╔══╝  ██║╚════██║",
		  "                ██║ ╚████║██║  ██║██║     ██║███████║",
		  "                ╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝",
		  "//====================================================================*/",
		  "",
		  "",
		  "// int a[N];",
		  "// vi g[N];",
		  "",
		  "/***",
		  " *",
		  " * 64-bit hashing for vectors or strings",
		  " * Get the forward and reverse hash of any segment",
		  " * Base is chosen randomly to prevent anti-hash cases from being constructed",
		  " * ",
		  " * Complexity - O(n) to build, O(1) for each hash query",
		  " *",
		  "***/",
		  "",
		  "constexpr uint64_t mod = (1ULL << 61) - 1;",
		  "",
		  "const uint64_t seed = chrono::system_clock::now().time_since_epoch().count();",
		  "const uint64_t base = mt19937_64(seed)() % (mod / 3) + (mod / 3);",
		  "",
		  "uint64_t base_pow[MAXLEN];",
		  "",
		  "int64_t modmul(uint64_t a, uint64_t b){",
		  "    uint64_t l1 = (uint32_t)a, h1 = a >> 32, l2 = (uint32_t)b, h2 = b >> 32;",
		  "    uint64_t l = l1 * l2, m = l1 * h2 + l2 * h1, h = h1 * h2;",
		  "    uint64_t ret = (l & mod) + (l >> 61) + (h << 3) + (m >> 29) + (m << 35 >> 3) + 1;",
		  "    ret = (ret & mod) + (ret >> 61);",
		  "    ret = (ret & mod) + (ret >> 61);",
		  "    return ret - 1;",
		  "}",
		  "",
		  "void init(){",
		  "    base_pow[0] = 1;",
		  "    for (int i = 1; i < MAXLEN; i++){",
		  "        base_pow[i] = modmul(base_pow[i - 1], base);",
		  "    }",
		  "}",
		  "",
		  "struct PolyHash{",
		  "    /// Remove suff vector and usage if reverse hash is not required for more speed",
		  "    vector<int64_t> pref, suff;",
		  "",
		  "    PolyHash() {}",
		  "",
		  "    template <typename T>",
		  "    PolyHash(const vector<T>& ar){",
		  "        if (!base_pow[0]) init();",
		  "",
		  "        int n = ar.size();",
		  "        assert(n < MAXLEN);",
		  "        pref.resize(n + 3, 0), suff.resize(n + 3, 0);",
		  "",
		  "        for (int i = 1; i <= n; i++){",
		  "            pref[i] = modmul(pref[i - 1], base) + ar[i - 1] + 997;",
		  "            if (pref[i] >= mod) pref[i] -= mod;",
		  "        }",
		  "",
		  "        for (int i = n; i >= 1; i--){",
		  "            suff[i] = modmul(suff[i + 1], base) + ar[i - 1] + 997;",
		  "            if (suff[i] >= mod) suff[i] -= mod;",
		  "        }",
		  "    }",
		  "",
		  "    PolyHash(const char* str)",
		  "        : PolyHash(vector<char> (str, str + strlen(str))) {}",
		  "",
		  "    uint64_t get_hash(int l, int r){",
		  "        int64_t h = pref[r + 1] - modmul(base_pow[r - l + 1], pref[l]);",
		  "        return h < 0 ? h + mod : h;",
		  "    }",
		  "",
		  "    uint64_t rev_hash(int l, int r){",
		  "        int64_t h = suff[l + 1] - modmul(base_pow[r - l + 1], suff[r + 2]);",
		  "        return h < 0 ? h + mod : h;",
		  "    }",
		  "};",
		  "",
		  "void solve() {",
		  "    ll n=0,a=0,b=0,i=0,j=0,k=0,l=0,r=0,ans=0,temp=0,cnt=0,sum=0;",
		  "    string s,s1,s2,s3;",
		  "    ",
		  "}",
		  "",
		  "int main() {",
		  "    fast_IO;",
		  "    ",
		  "    #ifndef ONLINE_JUDGE",
		  "        freopen(\"input.txt\",\"r\",stdin);",
		  "        freopen(\"output.txt\",\"w\",stdout);",
		  "    #endif",
		  "",
		  "    int t = 1;",
		  "    // cin >> t;",
		  "    while(t--) {",
		  "        ",
		  "        solve();",
		  "    }",
		  "",
		  "    return 0;",
		  "}"
		],
		"description": ""
	  }
}
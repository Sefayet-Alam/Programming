{
	"DFS_Find_cycle": {
		"prefix": "DFS_Find_cycle",
		"body": [
		  "",
		  "bool vis[N];",
		  "vector<ll>g[N];",
		  "ll n,m,u,v;",
		  "bool f=0;",
		  "",
		  "vector<ll>parent(N,0);",
		  "ll st,en;",
		  "bool dfs(ll vertex,ll par){",
		  "",
		  "    vis[vertex]=1;",
		  "    for(ll child: g[vertex]){",
		  "      if(child==par) continue;",
		  "      else if(vis[child]){",
		  "        en=vertex;",
		  "        st=child;",
		  "        return true;",
		  "      }",
		  "      else{",
		  "        parent[child]=vertex;",
		  "        if( dfs(child,vertex)) return true;",
		  "      }",
		  "        ",
		  "    }",
		  "    return false;",
		  "",
		  "}",
		  "void find_cycle(){",
		  "    // mem(vis,0);",
		  "    // parent.assign(n,-1);",
		  "    st=0;",
		  "    for (ll i=1;i<=n;i++) {",
		  "        if (!vis[i] && dfs(i,parent[i]))",
		  "            break;",
		  "    }",
		  "    // cout<<st<<nn;",
		  "    if (st == 0) {",
		  "        cout<<\"IMPOSSIBLE\"<<nn;",
		  "    } ",
		  "    else{",
		  "        vector<ll> cycle;",
		  "        cycle.push_back(st);",
		  "        ",
		  "        for (ll i = en; i != st; i = parent[i]){",
		  "            cycle.push_back(i);",
		  "        }",
		  "        cycle.push_back(st);",
		  "        ",
		  "        cout<<cycle.size()<<nn;",
		  "        cout<<cycle<<nn;",
		  "    }",
		  "}"
		],
		"description": "DFS_Find_cycle"
	  }
}
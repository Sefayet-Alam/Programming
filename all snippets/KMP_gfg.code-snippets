{
	"KMP_GFG": {
		"prefix": "KMP_GFG",
		"body": [
		  "vector<ll>lps(N);",
		  "",
		  "void computeLPSArray(string &pat,ll m)",
		  "{",
		  "    // length of the previous longest prefix suffix",
		  "    ll len = 0;",
		  " ",
		  "    lps[0] = 0; // lps[0] is always 0",
		  " ",
		  "    // the loop calculates lps[i] for i = 1 to M-1",
		  "    ll i = 1;",
		  "    while (i < m) {",
		  "        if (pat[i] == pat[len]) {",
		  "            lps[i] = len+1;",
		  "            len++;",
		  "            i++;",
		  "        }",
		  "        else // (pat[i] != pat[len])",
		  "        {",
		  "            // This is tricky. Consider the example.",
		  "            // AAACAAAA and i = 7. The idea is similar",
		  "            // to search step.",
		  "            if (len != 0) {",
		  "                len = lps[len - 1];",
		  " ",
		  "                // Also, note that we do not increment",
		  "                // i here",
		  "            }",
		  "            else // if (len == 0)",
		  "            {",
		  "                lps[i] = 0;",
		  "                i++;",
		  "            }",
		  "        }",
		  "    }",
		  "   ",
		  "}",
		  " ",
		  " ",
		  "",
		  "void KMPSearch(string &txt, string &pat)",
		  "{",
		  "    ll m =pat.size();",
		  "    ll n = txt.size();",
		  " ",
		  "    // create lps[] that will hold the longest prefix suffix",
		  "    // values for pattern",
		  "    lps.resize(m);",
		  " ",
		  "    // Preprocess the pattern (calculate lps[] array)",
		  "    computeLPSArray(pat, m);",
		  "    //  cout<<lps<<endl;",
		  "    ll i = 0; // index for txt[]",
		  "    ll j = 0; // index for pat[]",
		  "    // cout<<n<<\" \"<<m<<endl;",
		  "    while (n - i >= m - j) {",
		  "    //    cout<<i<<\" \"<<j<<endl;",
		  "        if (pat[j] == txt[i]) {",
		  "            j++;",
		  "            i++;",
		  "        }",
		  "        if (j == m) {",
		  "            // printf(\"Found pattern at index %d \", i - j);",
		  "            cout<<i-j<<endl;",
		  "            j = lps[j - 1];",
		  "        }",
		  " ",
		  "        // mismatch after j matches",
		  "        else if (i < n && pat[j] != txt[i]) {",
		  "            // Do not match lps[0..lps[j-1]] characters,",
		  "            // they will match anyway",
		  "            if (j != 0)",
		  "                j = lps[j - 1];",
		  "            else",
		  "                i = i + 1;",
		  "        }",
		  "    }",
		  "}",
		  " "
		],
		"description": "KMP_GFG"
	  }
}
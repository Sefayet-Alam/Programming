{
	"": {
		"prefix": "LCA O(n)",
		"body": [
		  "int parent[N];",
		  "",
		  "void dfs(int vertex,int par=-1){",
		  "    /*",
		  "    take action on vertex after entering the vertex",
		  "    */",
		  "    parent[vertex]=par;",
		  "    for(int child: g[vertex]){",
		  "        /*",
		  "        take action on child before entering the child node",
		  "        */",
		  "        if(child==par) continue;",
		  "        dfs(child,vertex);",
		  "        /*",
		  "        take action on child after entering the child node",
		  "        */",
		  "    }",
		  "    /*",
		  "    take action on vertex before exiting the vertex",
		  "    */",
		  "}",
		  "",
		  "vector<int> path(int vertex){",
		  "    vector<int> ans;",
		  "    while(vertex!=-1){",
		  "        ans.push_back(vertex);",
		  "        vertex=parent[vertex];",
		  "    }",
		  "    reverse(ans.begin(),ans.end());",
		  "    return ans;",
		  "}",
		  "",
		  "int LCA(int n){",
		  "    int i;",
		  "    dfs(1);",
		  "    int x,y;",
		  "    cin>>x>>y;",
		  "    vector<int> path_x=path(x);",
		  "    vector<int> path_y=path(y);",
		  "    int mn_ln=min(path_x.size(),path_y.size());",
		  "",
		  "    int lca=-1;",
		  "    fo(i,mn_ln){",
		  "        if(path_x[i]==path_y[i]){",
		  "            lca=path_x[i];",
		  "        }else{",
		  "            break;",
		  "        }",
		  "    }",
		  "    return lca;",
		  "}"
		],
		"description": ""
	  }
}
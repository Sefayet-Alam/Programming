{
	"MST_prims": {
		"prefix": "prim's algorithm for MST.O(mlogn)",
		"body": [
		  "",
		  "bool visit[N];",
		  "vector <pll > g[N];",
		  "ll n,m;",
		  "int prims_mst (ll src) {",
		  "   QP<pair<ll,pll>> pq;",
		  "   memset (visit, 0, sizeof (visit));",
		  "   visit[src] = 1;",
		  "   for (auto child:g[src]) {",
		  "      ll curr_v = child.first;",
		  "      ll curr_w = child.second;",
		  "      pq.push({curr_w,{src,curr_v}});",
		  "   }",
		  "   ll cnt = 0;",
		  "   while (!pq.empty()) {",
		  "      auto a = pq.top(); ",
		  "      pq.pop();",
		  "      ll from, to, w;",
		  "      from = a.second.first; ",
		  "      to = a.second.second; ",
		  "      w = a.first;",
		  "      //printf (\"%d %d %d\\n\", u, v, w);",
		  "      if (!visit[to]) {",
		  "         visit[to] = 1;",
		  "        //  cout<<from<<\" \"<<to<<nn; //prints added edges",
		  "         cnt += w;",
		  "         from = to;",
		  "         for (auto child: g[from]) {",
		  "            to = child.first;",
		  "            w = child.second;",
		  "            if (!visit[to]) pq.push({w,{from,to}});",
		  "         }",
		  "      }",
		  "   }",
		  "   return cnt;",
		  "}",
		  "void reset(){",
		  "    for(ll i=0;i<=n;i++){",
		  "        g[i].clear();",
		  "        visit[i]=0;",
		  "    }",
		  "}",
		  ""
		],
		"description": "MST_prims"
	  }
}
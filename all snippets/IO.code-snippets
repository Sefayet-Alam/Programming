{
	"": {
		"prefix": "namespace io",
		"body": [
		  "namespace io{",
		  " ",
		  "    template<typename First, typename Second> ostream& operator << ( ostream &os, const pair<First, Second> &p ) { return os << p.first << \" \" << p.second; }",
		  "    template<typename First, typename Second> ostream& operator << ( ostream &os, const map<First, Second> &mp ) { for( auto it : mp ) { os << it << endl;  } return os; }",
		  "    template<typename First> ostream& operator << ( ostream &os, const vector<First> &v ) { bool space = false; for( First x : v ) { if( space ) os << \" \"; space = true; os << x; } return os; }",
		  "    template<typename First> ostream& operator << ( ostream &os, const set<First> &st ) { bool space = false; for( First x : st ) { if( space ) os << \" \"; space = true; os << x; } return os; }",
		  "    template<typename First> ostream& operator << ( ostream &os, const multiset<First> &st ) { bool space = false; for( First x : st ) { if( space ) os << \" \"; space = true; os << x; } return os; }",
		  " ",
		  "    template<typename First, typename Second> istream& operator >> ( istream &is, pair<First, Second> &p ) { return is >> p.first >> p.second; }",
		  "    template<typename First> istream& operator >> ( istream &is, vector<First> &v ) { for( First &x : v ) { is >> x; } return is; }",
		  "    ",
		  "    long long fastread(){ char c; long long d = 1, x = 0; do c = getchar(); while( c == ' ' || c == '\\n' ); if( c == '-' ) c = getchar(), d = -1; while( isdigit( c ) ){ x = x * 10 + c - '0'; c = getchar(); } return d * x; }",
		  "    ",
		  "    static bool sep = false;",
		  " ",
		  "    using std::to_string;",
		  " ",
		  "    string to_string( bool x ){ return ( x ? \"true\" : \"false\" ); }",
		  "    string to_string( const string & s ){ return \"\\\"\" + s + \"\\\"\"; }",
		  "    string to_string( const char * s ){ return \"\\\"\" + string( s ) + \"\\\"\"; }",
		  "    string to_string ( const char & c ) { string s; s += c; return \"\\'\" + s + \"\\'\"; }",
		  " ",
		  "    template<typename Type> string to_string( vector<Type> );",
		  "    template<typename First, typename Second> string to_string( pair<First, Second> );",
		  "    template<typename Collection> string to_string( Collection );",
		  " ",
		  "    template<typename First, typename Second> string to_string( pair<First, Second> p ){ return \"{\" + to_string( p.first ) + \", \" + to_string( p.second ) + \"}\"; }",
		  "    template<typename Type> string to_string( vector<Type> v ) { bool sep = false; string s = \"[\"; for( Type x: v ){ if( sep ) s += \", \"; sep = true; s += to_string( x ); } s += \"]\"; return s; }",
		  "    template<typename Collection> string to_string( Collection collection ) { bool sep = false; string s = \"{\"; for( auto x: collection ){ if( sep ) s += \", \"; sep = true; s += to_string( x ); } s += \"}\"; return s; }",
		  " ",
		  "    void print() { cerr << endl; sep = false; }",
		  "    template <typename First, typename... Other> void print( First first, Other... other ) { if( sep ) cerr << \" | \"; sep = true; cerr << to_string( first ); print( other... ); }",
		  " ",
		  "} using namespace io;"
		],
		"description": ""
	  }
}
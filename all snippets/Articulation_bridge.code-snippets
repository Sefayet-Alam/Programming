{
	"Finds  the edges that can be removed and the graph such that the number of connected components will not increase": {
		"prefix": "Articulation edges dfs",
		"body": [
		  " ",
		  "const ll sz = 200009;//",
		  "vector <ll> g[sz];",
		  "vector<pair<ll,ll>>g2[sz];",
		  "ll low[sz], start[sz], TM = 1, root = 1;",
		  "ll n, k, a[sz], b[sz], c[sz], vis2[sz], mn;",
		  "ll d, e;",
		  "bool artPoint[sz], vis[sz];",
		  "map<pair<ll,ll>,ll>mp;",
		  "vector<ll>v;",
		  "int got;",
		  " ",
		  "void artdfs(ll u, ll p)",
		  "{",
		  "    low[u] = start[u] = TM++;",
		  "    vis[u] = 1;",
		  "    ll child = 0;       /// Counter of the children of u in dfs tree",
		  "    for(ll i = 0; i < g[u].size(); i++) {",
		  "        ll v = g[u][i];",
		  "        if(v == p)",
		  "            continue;",
		  " ",
		  "        if(vis[v])",
		  "            low[u] = min(low[u], start[v]);",
		  "        else {",
		  "            artdfs(v, u);",
		  "            low[u] = min(low[u], low[v]);",
		  " ",
		  "            if(start[u] < low[v]) {    /// For articulation bridge: if(start[u] < low[v])",
		  "                artPoint[u] = true;  ",
		  "                                   /// the edge between u and v is an articulation bridge",
		  "                mp[{u,v}]=1;",
		  "            }",
		  "            child++;",
		  "        }",
		  "    }",
		  " ",
		  "}",
		  " "
		],
		"description": "Finds  the edges that can be removed and the graph such that the number of connected components will not increase"
	  }
}
{
	"Convex_hull_O(n^2)": {
		"prefix": "Convex_hull_divide_conquer_O(n^2)",
		"body": [
		  "vector<pll> points;",
		  "set<pll> convex_hull;",
		  "",
		  "ll n;",
		  "pll lowp;",
		  "map<pll, double> mpp;",
		  "bool cmp(pll a, pll b)",
		  "{",
		  "    return a.second < b.second;",
		  "}",
		  "bool cmp2(pll a, pll b)",
		  "{",
		  "    return (a.second - lowp.second) * (b.first - lowp.first) < (b.second - lowp.second) * (a.first - lowp.first);",
		  "}",
		  "ll getside(pll a, pll b, pll p)",
		  "{",
		  "    ll val = (p.second - a.second) * (b.first - a.first) - (b.second - a.second) * (p.first - a.first);",
		  "",
		  "    if (val > 0)",
		  "        return 1;",
		  "    if (val < 0)",
		  "        return -1;",
		  "    return 0;",
		  "}",
		  "ll getDist(pll a, pll b, pll p)",
		  "{",
		  "    return abs((p.second - a.second) * (b.first - a.first) - (b.second - a.second) * (p.first - a.first));",
		  "}",
		  "",
		  "void QuickHull(pll a, pll b, ll side)",
		  "{",
		  "    ll pos = -1;",
		  "    ll max_dist = 0;",
		  "",
		  "    for (int i = 0; i < n; i++)",
		  "    {",
		  "        ll temp = getDist(a, b, points[i]);",
		  "        if (getside(a, b, points[i]) == side && temp > max_dist)",
		  "        {",
		  "            pos = i;",
		  "            max_dist = temp;",
		  "        }",
		  "    }",
		  "",
		  "    if (pos == -1)",
		  "    {",
		  "        convex_hull.insert(a);",
		  "        convex_hull.insert(b);",
		  "        return;",
		  "    }",
		  "    QuickHull(a, points[pos], side);",
		  "    QuickHull(points[pos], b, side);",
		  "}",
		  "void calculate_convex_hull()",
		  "{",
		  "",
		  "    cin >> n;",
		  "    if (n < 3)",
		  "    {",
		  "        cout << \"No convex hull found\" << nn;",
		  "        return;",
		  "    }",
		  "    ll x, y;",
		  "    map<pll,ll>vis;",
		  "    for (ll i = 0; i < n; i++)",
		  "    {",
		  "        cin >> x >> y;",
		  "        if(!vis[{x,y}]) points.push_back({x, y});",
		  "        vis[{x,y}]=1;",
		  "    }",
		  "    n=points.size();",
		  "",
		  "    sort(all(points));",
		  "    QuickHull(points[0], points[n - 1], 1);",
		  "    QuickHull(points[0], points[n - 1], -1);",
		  "    ",
		  "    // printing all points",
		  "    vector<ll> xs, ys;",
		  "",
		  "    for (auto it : points)",
		  "    {",
		  "        xs.push_back(it.first);",
		  "        ys.push_back(it.second);",
		  "    }",
		  "    cout << \"x=[\";",
		  "",
		  "    for (ll i = 0; i < xs.size(); i++)",
		  "    {",
		  "        cout << xs[i];",
		  "         if(i!=xs.size()-1) cout<< \",\";",
		  "    }",
		  "    cout <<  \"]\" << nn;",
		  "",
		  "    cout<<nn<<nn<<nn;",
		  "    cout << \"y=[\";",
		  "",
		  "    for (ll i = 0; i < xs.size(); i++)",
		  "    {",
		  "        cout << ys[i];",
		  "        if(i!=ys.size()-1) cout << \",\";",
		  "    }",
		  "    cout << \"]\" << nn;",
		  "    cout<<nn<<nn<<nn;",
		  "",
		  "    cout<<\" plt.scatter(x,y,c='r') \"<<nn;",
		  "    ",
		  "",
		  "    xs.clear();",
		  "    ys.clear();",
		  "",
		  "    // convex hull sorting and line printing",
		  "    vector<pll> ans;",
		  "    for (auto it : convex_hull)",
		  "        ans.push_back(it);",
		  "",
		  "    sort(all(ans), cmp);",
		  "    lowp = ans[0];",
		  "    sort(all(ans), cmp2);",
		  "",
		  "    for (auto it : ans)",
		  "    {",
		  "",
		  "        xs.push_back(it.first);",
		  "        ys.push_back(it.second);",
		  "        // vis[{it.first,it.second}]=1;",
		  "    }",
		  "    cout << \"x=[\";",
		  "",
		  "    for (ll i = 0; i < xs.size(); i++)",
		  "    {",
		  "        cout << xs[i] << \",\";",
		  "    }",
		  "    cout << lowp.first << \"]\" << nn;",
		  "     cout<<nn<<nn<<nn;",
		  "    cout << \"y=[\";",
		  "",
		  "    for (ll i = 0; i < ys.size(); i++)",
		  "    {",
		  "        cout << ys[i] << \",\";",
		  "    }",
		  "    cout << lowp.second<<\"]\" << nn;",
		  "    cout<<nn<<nn<<nn;",
		  "    cout<<\"plt.plot(x,y,c='b')\"<<nn;",
		  "    ",
		  "}"
		],
		"description": "Convex_hull_O(n^2)"
	  }
}
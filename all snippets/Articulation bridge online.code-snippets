{
	"Online articulation bridge": {
		"prefix": "Online articulation bridge",
		"body": [
		  "const ll maxq = 2e5 + 3;",
		  "ll n, m, q;",
		  "set<pll> edgl;",
		  "pair<ll, ll> eadd[maxq];",
		  "ll ans[maxq];",
		  "struct OnlineBridge",
		  "{",
		  "    // dsu1: biconnected component",
		  "    // dsu2: bridge tree di forest",
		  "    vector<ll> par, dsu1, dsu2, sez2;",
		  "    ll bridges = 0;",
		  "    ll lca_iteration = 0;",
		  "    vector<ll> last_visit;",
		  "",
		  "    OnlineBridge(ll n) : par(n), dsu1(n), dsu2(n), sez2(n), last_visit(n, 0)",
		  "    {",
		  "        for (ll i = 0; i < n; i++)",
		  "        {",
		  "            par[i] = -1;",
		  "            dsu1[i] = dsu2[i] = i;",
		  "            sez2[i] = 1;",
		  "        }",
		  "    }",
		  "    ll find1(ll v)",
		  "    {",
		  "        if (v == -1)",
		  "            return -1;",
		  "        return dsu1[v] == v ? v : dsu1[v] = find1(dsu1[v]);",
		  "    }",
		  "    ll find2(ll v)",
		  "    {",
		  "        v = find1(v);",
		  "        return dsu2[v] == v ? v : dsu2[v] = find2(dsu2[v]);",
		  "    }",
		  "    void make_root(ll v)",
		  "    {",
		  "        v = find1(v);",
		  "        ll r = v, c = -1;",
		  "        while (v != -1)",
		  "        {",
		  "            ll p = find1(par[v]);",
		  "            par[v] = c, dsu2[v] = r, c = v;",
		  "            v = p;",
		  "        }",
		  "        sez2[r] = sez2[c];",
		  "    }",
		  "    void merge_path(ll a, ll b)",
		  "    {",
		  "        lca_iteration++;",
		  "        vector<ll> path_a, path_b;",
		  "        ll lca = -1;",
		  "        while (1)",
		  "        {",
		  "            if (a == -1)",
		  "            {",
		  "                swap(a, b);",
		  "                swap(path_a, path_b);",
		  "            }",
		  "            a = find1(a);",
		  "            path_a.push_back(a);",
		  "            if (last_visit[a] == lca_iteration)",
		  "            {",
		  "                lca = a;",
		  "                break;",
		  "            }",
		  "            last_visit[a] = lca_iteration;",
		  "            a = par[a];",
		  "        }",
		  "        for (ll i = 0; i < 2; i++, swap(path_a, path_b))",
		  "            for (ll v : path_a)",
		  "            {",
		  "                dsu1[v] = lca;",
		  "                if (v == lca)",
		  "                    break;",
		  "                bridges--;",
		  "            }",
		  "    }",
		  "",
		  "    void add_edge(ll a, ll b)",
		  "    {",
		  "        a = find1(a);",
		  "        b = find1(b);",
		  "        if (a == b)",
		  "            return;",
		  "        ll ca = find2(a), cb = find2(b);",
		  "        if (ca != cb)",
		  "        {",
		  "            bridges++;",
		  "            if (sez2[ca] > sez2[cb])",
		  "            {",
		  "                swap(a, b);",
		  "                swap(ca, cb);",
		  "            }",
		  "            make_root(a);",
		  "            par[a] = dsu2[a] = b;",
		  "            sez2[cb] += sez2[a];",
		  "        }",
		  "        else",
		  "        {",
		  "            merge_path(a, b);",
		  "        }",
		  "    }",
		  "};"
		],
		"description": "Online articulation bridge"
	  }
}
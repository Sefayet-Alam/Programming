{
	"mo's algo,offline query..l to r->sum of odd freq of elements": {
		"prefix": "mo's_algo",
		"body": [
		  "",
		  "//set N=30005 if TLE",
		  "",
		  "",
		  "struct query{",
		  "    int l, r, ind;",
		  "    ll k;",
		  "}qs[200005];",
		  "",
		  "int n, q, ans[200005];",
		  "int freq[1000005];",
		  "int arr[N], c=0, bucket;",
		  "",
		  "void add(int ind){",
		  "    freq[arr[ind]]++;",
		  "    if(freq[arr[ind]]==1) c++;",
		  "}",
		  "",
		  "void rem(int ind){",
		  "    freq[arr[ind]]--;",
		  "    if(freq[arr[ind]]==0) c--;",
		  "}",
		  "",
		  "int main()",
		  "{",
		  "    fast;",
		  "    cin>>n;",
		  "    bucket=max(int(sqrt(n)),1);",
		  "    ll i;",
		  "    fr(i,n) cin>>arr[i];",
		  "    cin>>q;",
		  "    fr(i,q){",
		  "        cin>>qs[i].l>>qs[i].r, qs[i].ind=i;",
		  "        qs[i].l--, qs[i].r--;",
		  "    }",
		  "    sort(qs,qs+q,[](query a, query b){",
		  "        if(a.l/bucket!=b.l/bucket) return a.l<b.l;",
		  "        return a.r<b.r;",
		  "    });",
		  "    int l=0, r=0;",
		  "    fr(i,q){",
		  "        while(r<=qs[i].r) add(r++);",
		  "        while(r-1>qs[i].r) rem(--r);",
		  "        while(l<qs[i].l) rem(l++);",
		  "        while(l>qs[i].l) add(--l);",
		  "        ans[qs[i].ind]=c;",
		  "    }",
		  "    fr(i,q){",
		  "        cout<<ans[i]<<nn;",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "mo's algo,offline query..l to r->sum of odd freq of elements"
	  }
}
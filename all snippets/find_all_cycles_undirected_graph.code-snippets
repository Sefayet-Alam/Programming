{
	"find_all_cycles_undirected": {
		"prefix": "find_all_cycles_undirected",
		"body": [
		  "bool vis[N];",
		  "vector<ll>g[N];",
		  "map<pair<int,int>,ll>wghts;",
		  "vector<ll>ans;",
		  "ll b;",
		  "ll color[N];",
		  "ll par[N];",
		  "void dfs_cycle(ll u, ll p)",
		  "{",
		  "",
		  "    if (color[u] == 2) {",
		  "        return;",
		  "    }",
		  " ",
		  "    if (color[u] == 1) {",
		  "        vector<ll> v;   ",
		  "        ll cur = p;",
		  "        v.push_back(cur);",
		  "        ll curr=LLONG_MAX;",
		  "        while (cur != u) {",
		  "            cur = par[cur];",
		  "            if(v.size()) curr=min(wghts[{cur,v.back()}],curr);",
		  "            v.push_back(cur);",
		  "        }",
		  "        curr=min(wghts[{v.back(),v[0]}],curr);",
		  "        // cout<<curr<<nn<<v<<nn;",
		  "        if(curr<b){",
		  "            b=curr;",
		  "            ans=v;",
		  "        }",
		  "        return;",
		  "    }",
		  "    par[u] = p;",
		  "    color[u] = 1;",
		  "    for (ll v : g[u]) {",
		  "        if (v == par[u]) {",
		  "            continue;",
		  "        }",
		  "        dfs_cycle(v, u);",
		  "    }",
		  "    color[u] = 2;",
		  "}",
		  "void reset(ll n,ll m){",
		  "     wghts.clear();",
		  "     ans.clear();",
		  "      b=INT_MAX;",
		  "    for(ll i=0;i<=n;i++){",
		  "        g[i].clear();",
		  "        par[i]=0;",
		  "        color[i]=0;",
		  "        vis[i]=0;",
		  "",
		  "    }",
		  "}"
		],
		"description": "find_all_cycles_undirected"
	  }
}
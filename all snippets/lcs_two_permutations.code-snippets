{
	"lcs_two_permutations": {
		"prefix": "lcs_two_permutations",
		"body": [
		  "ll n;",
		  "        cin >> n;",
		  "        vector<ll> a(n + 1), b(n + 1), c(n + 1), pos(n + 1);",
		  "        for (ll i = 1; i <= n; i++)",
		  "        {",
		  "            cin >> a[i];",
		  "            pos[a[i]] = i;",
		  "        }",
		  "        for (ll i = 1; i <= n; i++)",
		  "        {",
		  "            cin >> b[i];",
		  "            c[i] = pos[b[i]];",
		  "        }",
		  "        for (ll i = 1; i <= n; i++)",
		  "        {",
		  "            c[i] = pos[b[i]];",
		  "        }",
		  "        // every increasing subsequence in c represents a common subsequence of a and b",
		  "        //  now the lis of c will be the answer for lcs of two permutations",
		  "        vector<ll> lis;",
		  "        for (int i = 1; i <= n; ++i)",
		  "        {",
		  "            int p = lower_bound(begin(lis), end(lis), c[i]) - begin(lis);",
		  "            if (p == lis.size())",
		  "                lis.push_back(c[i]);",
		  "            else",
		  "                lis[p] = c[i];",
		  "        }",
		  "        cout<<lis.size()<<nn;"
		],
		"description": "lcs_two_permutations"
	  }
}
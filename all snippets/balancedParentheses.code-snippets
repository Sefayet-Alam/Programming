{
	"a function to solve balance parentheses by stack": {
		"prefix": "balancedParentheses",
		"body": [
		  "unordered_map<char,int> symbols ={{'(',-1},{'{',-2},{'[',-3},{')',1},{'}',2},{']',3}};",
		  "bool isBalanced(string s){",
		  "    stack<char> st;",
		  "    for(char bracket : s){",
		  "        if(symbols[bracket]<0){",
		  "            st.push(bracket);",
		  "        }else{",
		  "            if(st.empty()) return 0;",
		  "            char top=st.top();",
		  "            st.pop();",
		  "            if(symbols[top] + symbols[bracket] !=0){",
		  "                return 0;",
		  "            }",
		  "        }",
		  "    }",
		  "    if(st.empty()) return 1;",
		  "    return 0;",
		  "}"
		],
		"description": "a function to solve balance parentheses by stack"
	  }
}
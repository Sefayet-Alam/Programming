{
	"trie_NEW": {
		"prefix": "trie_NEW",
		"body": [
		  "const int  m=27;",
		  "ll Trie[N][m];",
		  "ll nnode,n;",
		  "bool isword[N];",
		  "bool f;",
		  "",
		  "void reset(ll k){",
		  "    for(ll i=0;i<m;i++){",
		  "        Trie[k][i]=-1;",
		  "    }",
		  "}",
		  "",
		  "void Insert(string s){",
		  "    ll n=s.size(),node=0;",
		  "    for(ll i=0;i<n;i++){",
		  "        if(Trie[node][s[i]-'0']==-1){",
		  "            Trie[node][s[i]-'0']=++nnode;",
		  "            // reset(nnode);",
		  "        }",
		  "        // cout<<node<<nn;",
		  "        // if(i<n-1)",
		  "         node=Trie[node][s[i]-'0'];",
		  "    }",
		  "    isword[node]=1;",
		  "}",
		  "",
		  "bool Search(string s){",
		  "    // print(s);",
		  "    ll sz=s.size(),node=0;",
		  "    for(ll i=0;i<sz;i++){",
		  "         ll ch=s[i]-'0';",
		  "        if(Trie[node][ch]==-1){",
		  "            return false;",
		  "        }",
		  "        // else if(isword[Trie[node][ch]]){",
		  "        //     f=1; //checks if there was a string in the trie that is a pref/substr of this",
		  "        // }",
		  "        node=Trie[node][ch];",
		  "    }",
		  "    if(isword[node]) return true;",
		  "    else return false;",
		  "}",
		  "",
		  "void init(){",
		  "    mem(Trie,-1);",
		  "    mem(isword,0);",
		  "    f=0;",
		  "    nnode=0;",
		  "}"
		],
		"description": "trie_NEW"
	  }
}
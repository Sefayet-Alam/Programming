{
	"given dataset of x and y, finds integration value at x0": {
		"prefix": "numerical integration",
		"body": [
		  "import numpy as np",
		  "import matplotlib.pyplot as plt",
		  "",
		  "def func(x):",
		  "    return x**2",
		  "",
		  "def trapezoidal_rule(func, a, b, n):",
		  "    h = (b - a) / n",
		  "    x = np.linspace(a, b, n+1)",
		  "    y = func(x)",
		  "    integral = h * (y[0]/2 + np.sum(y[1:-1]) + y[-1]/2)",
		  "    return integral",
		  "",
		  "def simpsons_one_third_rule(func, a, b, n):",
		  "    if n % 2 != 0:",
		  "        raise ValueError(\"Number of subintervals must be even for Simpson's 1/3 Rule.\")",
		  "",
		  "    h = (b - a) / n",
		  "    x = np.linspace(a, b, n+1)",
		  "    y = func(x)",
		  "",
		  "    integral = h/3 * (y[0] + 4*np.sum(y[1:-1:2]) + 2*np.sum(y[2:-2:2]) + y[-1])",
		  "    return integral",
		  "",
		  "def plot_integrate(func, a, b, n):",
		  "    x = np.linspace(a, b, 1000)",
		  "    y = func(x)",
		  "",
		  "    plt.plot(x, y, label='Function to be Integrated')",
		  "    plt.fill_between(x, y, alpha=0.1, color='blue', label='Area under the curve')",
		  "",
		  "    # Trapezoidal Rule",
		  "    integral_trapezoidal = trapezoidal_rule(func, a, b, n)",
		  "    plt.title(f'Trapezoidal Rule\\nIntegral: {integral_trapezoidal:.4f}')",
		  "",
		  "    plt.legend()",
		  "    plt.show()",
		  "",
		  "    #Simson's Rule",
		  "    integral_simpson = simpsons_one_third_rule(func, a, b, n)",
		  "    plt.title(f'Simpson\\'s 1/3 Rule\\nIntegral: {integral_simpson:.4f}')",
		  "",
		  "    plt.legend()",
		  "    plt.show()",
		  "",
		  "a = 0",
		  "b = 2",
		  "n = 4",
		  "",
		  "plot_integrate(func, a, b, n)"
		],
		"description": "given dataset of x and y, finds integration value at x0"
	  }
}
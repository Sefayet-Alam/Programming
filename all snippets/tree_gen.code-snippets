{
	"tree_gen": {
		"prefix": "tree_gen",
		"body": [
		  "//generator to generate testcase",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "#define ll long long int ",
		  "mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());",
		  "// return a random number in [l, r] range",
		  "ll rand(ll l, ll r) {",
		  "    return uniform_int_distribution<ll>(l, r)(rng);",
		  "}",
		  "",
		  "void tree(int n,int m,int c,int w) {",
		  "    int t = rand(1, 5); // random parameter",
		  "",
		  "    vector<int> p(n);",
		  "    for (int i = 1; i < n; i++) {",
		  "        for (int j = 0; j <= t; j++)",
		  "            p[i] = max(p[i], (int)rand(0, i - 1));",
		  "    }",
		  "",
		  "    vector<int> perm(n);",
		  "    for (int i = 0; i < n; i++) perm[i] = i;",
		  "    shuffle(perm.begin(), perm.end(), rng);",
		  "",
		  "    vector<pair<int, int> > edges;",
		  "    for (int i = 1; i < n; i++)",
		  "        if (rand(0, 1))",
		  "            edges.push_back(make_pair(perm[i], perm[p[i]]));",
		  "        else",
		  "            edges.push_back(make_pair(perm[p[i]], perm[i]));",
		  "    shuffle(edges.begin(), edges.end(), rng);",
		  "    ",
		  "    printf(\"%d %d %d %d\\n\", n, m, c, w);",
		  "    for (int i = 0; i + 1 < n; i++)",
		  "        printf(\"%d %d\\n\", edges[i].first + 1, edges[i].second + 1);",
		  "}",
		  "",
		  "void setIO(){",
		  "    #ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "    #endif // ONLINE_JUDGE",
		  "",
		  "}",
		  "",
		  "const int N = 10; // maximum number of nodes",
		  "const int M = 100;",
		  "const int S = 10;",
		  "",
		  "int main(int argc, char* argv[]) {",
		  "    // setIO();",
		  "    ll t = rand(10, 30);",
		  "    cout << t << endl;",
		  "    while (t--) {",
		  "    	int n = rand(2, N); // number of nodes",
		  "        int c = rand(1, M); // number of nodes",
		  "        int w = rand(1, S); // number of nodes",
		  "        tree(n,n-1,c,w);",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "tree_gen"
	  }
}
{
	"root finding": {
		"prefix": "Linear curve fitting",
		"body": [
		  "#Least-Square Curve Fitting-Linear",
		  "import numpy as np",
		  "import matplotlib.pyplot as plt",
		  "",
		  "",
		  "",
		  "def linear_least_squares(x, y):",
		  "    x = np.array(x)",
		  "    y = np.array(y)",
		  "",
		  "    n = len(x)",
		  "    sum_x = np.sum(x)",
		  "    sum_y = np.sum(y)",
		  "    sum_xy = np.sum(x * y)",
		  "    sum_x_squared = np.sum(np.power(x,2))",
		  "",
		  "    # Calculate the coefficients of the linear equation (y = mx + b)",
		  "    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x**2)",
		  "    b = (sum_y - m * sum_x) / n",
		  "",
		  "    return m, b",
		  "",
		  "def predict_values(x, m, b):",
		  "    x = np.array(x)",
		  "    y_predicted = m * x + b",
		  "    return y_predicted",
		  "",
		  "def plot_linear_fit(x, y, m, b, x_predict, y_predict):",
		  "    x = np.array(x)",
		  "    plt.scatter(x, y, label='Data Points')",
		  "    plt.plot(x, m * x + b, color='r', label=f'Linear Fit: y = {m:.2f}x + {b:.2f}')",
		  "    plt.scatter(x_predict, y_predict, color='green', label='Predicted Values')",
		  "    plt.xlabel('X-axis')",
		  "    plt.ylabel('Y-axis')",
		  "    plt.legend()",
		  "    plt.show()",
		  "# Example usage",
		  "x_data = [1, 2, 3, 4, 5]",
		  "y_data = [2, 3, 2.5, 4, 3.5]",
		  "",
		  "m, b = linear_least_squares(x_data, y_data)",
		  "print(f'Linear Equation: y = {m:.2f}x + {b:.2f}')",
		  "",
		  "# Predict values for new x_data",
		  "x_predict = [6, 7, 8]",
		  "y_predict = predict_values(x_predict, m, b)",
		  "print(f'Predicted Values for x_predict: {y_predict}')",
		  "",
		  "plot_linear_fit(x_data, y_data, m, b, x_predict, y_predict)",
		  ""
		],
		"description": "root finding"
	  }
}
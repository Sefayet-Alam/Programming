{
	"": {
		"prefix": "double hash",
		"body": [
		  "const ll MAX_N = 1e6+10, mod = 2e9+63, base1 = 1e9+21, base2 = 1e9+181;",
		  "char s[MAX_N];  // 1-indexed",
		  "ll pw1[MAX_N], pw2[MAX_N], slen;",
		  "",
		  "void pw_calc() {",
		  "    pw1[0] = pw2[0] = 1;",
		  "    for(int i = 1; i < MAX_N; i++) {",
		  "        pw1[i] = (pw1[i-1] * base1) % mod;",
		  "        pw2[i] = (pw2[i-1] * base2) % mod;",
		  "    }",
		  "}",
		  "",
		  "struct Hash {",
		  "    ll h1[MAX_N], h2[MAX_N];",
		  "",
		  "    void init() {",
		  "        h1[0] = h2[0] = 0;",
		  "        for(int i = 1; i <= slen; i++) {",
		  "            h1[i] = (h1[i-1] * base1 + s[i]) % mod;",
		  "            h2[i] = (h2[i-1] * base2 + s[i]) % mod;",
		  "        }",
		  "    }",
		  "",
		  "    inline ll hashVal(int l, int r) {",
		  "        ll hsh1 = (h1[r] - h1[l-1] * pw1[r-l+1]) % mod;",
		  "        if(hsh1 < 0) hsh1 += mod;",
		  "        ll hsh2 = (h2[r] - h2[l-1] * pw2[r-l+1]) % mod;",
		  "        if(hsh2 < 0) hsh2 += mod;",
		  "        return (hsh1 << 32) | hsh2;",
		  "    }",
		  "",
		  "    inline ll hashOne(int l, int r) {",
		  "        ll hsh1 = (h1[r] - h1[l-1] * pw1[r-l+1]) % mod;",
		  "        if(hsh1 < 0) hsh1 += mod;",
		  "        return hsh1;",
		  "    }",
		  "",
		  "    inline ll hashTwo(int l, int r) {",
		  "        ll hsh2 = (h2[r] - h2[l-1] * pw2[r-l+1]) % mod;",
		  "        if(hsh2 < 0) hsh2 += mod;",
		  "        return hsh2;",
		  "    }",
		  "} fw;",
		  "",
		  "/* call pw_calc() for calculating powers less than MAX_N",
		  " * slen = strlen(s+1);   --> string length",
		  " * fw.init() will calculate the double hashes",
		  " * fw.hashVal(l,r) will return [l,,r] merged double hash value",
		  " * fw.hashOne(l, r) will return [l,,r] base1 hash",
		  " * fw.hashTwo(l, r) will return [l,,r] base2 hash",
		  "*/"
		],
		"description": ""
	  }
}
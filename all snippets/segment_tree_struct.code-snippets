{
	"Segment_tree_Struct": {
		"prefix": "Segment_tree_Struct",
		"body": [
		  "struct segment_tree{",
		  "    ll size;",
		  "    vector<ll>tree;",
		  "    //INITIALIZATION",
		  "    void init(ll n){",
		  "        size=1;",
		  "        while(size<n) size*=2;",
		  "        tree.assign(2*size,0LL);",
		  "    }",
		  "    ll merge(ll a,ll b){",
		  "        return a+b;",
		  "    }",
		  "",
		  "    void build(vector<ll> &a,ll x,ll lx,ll rx){",
		  "        //linear time",
		  "        if(rx-lx==1){",
		  "            if(lx<a.size()){",
		  "                tree[x]=a[lx];",
		  "            }",
		  "            return;",
		  "        }",
		  "        ll m=(lx+rx)/2;",
		  "        build(a,2*x+1,lx,m);",
		  "        build(a,2*x+2,m,rx);",
		  "        tree[x]=merge(tree[2*x+1],tree[2*x+2]);",
		  "    }",
		  "    void build(vector<ll> &a){",
		  "        //linear time",
		  "        build(a,0,0,size);",
		  "    }",
		  "    //SET AND GET",
		  "    void set(ll i,ll val,ll x,ll lx,ll rx){",
		  "        if(rx-lx==1){",
		  "            //leaf",
		  "            tree[x]=val;",
		  "            return;",
		  "        }",
		  "        ll m=(lx+rx)/2;",
		  "        if(i<m){",
		  "            set(i,val,2*x+1,lx,m);",
		  "        }",
		  "        else{",
		  "            set(i,val,2*x+2,m,rx);",
		  "        }",
		  "        tree[x]=merge(tree[2*x+1],tree[2*x+2]);",
		  "    }",
		  "    void set(ll i,ll val){",
		  "        // assigns val at index i",
		  "        set(i,val,0,0,size);",
		  "    }",
		  "",
		  "     ll get(ll i,ll x,ll lx,ll rx){",
		  "        if(rx-lx==1) return tree[x];",
		  "        ll m=(lx+rx)/2;",
		  "        ll ret;",
		  "        if(i<m){",
		  "            ret=get(i,2*x+1,lx,m);",
		  "        }",
		  "        else{",
		  "            ret=get(i,2*x+2,m,rx);",
		  "        }",
		  "        return merge(ret,tree[x]);",
		  "    }",
		  "    ll get(ll i){",
		  "        //gets the value of the ith position",
		  "        return get(i,0,0,size);",
		  "    }",
		  "",
		  "    ///RANGE SUM",
		  "    ll sum(ll l,ll r,ll x,ll lx,ll rx){",
		  "        if(lx>=r || l>=rx){",
		  "            return 0;",
		  "        }",
		  "        if(lx>=l && rx<=r){",
		  "            return tree[x];",
		  "        }",
		  "        ll m=(lx+rx)/2;",
		  "        ll s1=sum(l,r,2*x+1,lx,m);",
		  "        ll s2=sum(l,r,2*x+2,m,rx);",
		  "        return merge(s1,s2);",
		  "    }",
		  "    ll sum(ll l,ll r){",
		  "        //returns sum from l to r",
		  "        return sum(l,r,0,0,size);",
		  "    }",
		  "",
		  "    //RANGE ADD",
		  "    void add(ll l,ll r,ll v,ll x,ll lx,ll rx){",
		  "        if(lx>=r || l>=rx){",
		  "            return;",
		  "        }",
		  "        if(lx>=l && rx<=r){",
		  "            tree[x]=merge(tree[x],v);",
		  "            return;",
		  "        }",
		  "        ll m=(lx+rx)/2;",
		  "        add(l,r,v,2*x+1,lx,m);",
		  "        add(l,r,v,2*x+2,m,rx);  ",
		  "    }",
		  "    void add(ll l,ll r,ll v){",
		  "        //adds v from l to r",
		  "        add(l,r,v,0,0,size);",
		  "    }",
		  "",
		  "    //extras",
		  "    ll find(ll val,ll x,ll lx,ll rx){",
		  "        if(tree[x]<=val) return -1; ",
		  "        if(rx-lx==1) return lx;",
		  "        ll m=(lx+rx)/2;",
		  "        ll ret=find(val,2*x+1,lx,m);",
		  "        if(ret==-1){",
		  "            ret=find(val-tree[2*x+1],2*x+2,m,rx);",
		  "        }",
		  "        return ret;",
		  "    }",
		  "    ll find(ll val){",
		  "        // finds the position of the first value greater than val ",
		  "        return find(val,0,0,size);",
		  "    }   ",
		  "   ",
		  "};"
		],
		"description": "Segment_tree_Struct"
	  }
}
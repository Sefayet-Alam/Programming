{
	"string_hash": {
		"prefix": "string_hash",
		"body": [
		  "const ll base=33LL;",
		  "ll pw[N];",
		  "ll inv[N];",
		  "ll Hash[N];",
		  "",
		  "ll add(ll a,ll b,ll mod){",
		  "    ll res=(a+b)%mod;",
		  "    if(res<0){",
		  "        res+=mod;",
		  "    }",
		  "    return res;",
		  "}",
		  "",
		  "ll mult(ll a,ll b,ll mod){",
		  "    ll res=(a*b)%M;",
		  "    if(res<mod){",
		  "        res+=mod;",
		  "    }",
		  "    return res;",
		  "}",
		  "",
		  "ll power(ll a,ll b,ll mod)",
		  "{   ll res = 1;   ",
		  "    // a=a%mod; ",
		  "    // if (a==0) return 0; ",
		  "    while(b)",
		  "    {",
		  "        if(b&1) res=mult(res,a,mod);",
		  "        b /=2;",
		  "        a=mult(a,a,mod);",
		  "    }",
		  "    return res;",
		  "}",
		  "",
		  "",
		  "void precalc(){",
		  "    pw[0]=1;",
		  "    for(ll i=1;i<N;i++){",
		  "        pw[i]=mult(pw[i-1],base,M);",
		  "    }",
		  "   ll pow_inv=power(base,M-2,M);",
		  "   inv[0]=1;",
		  "     for(ll i=1;i<N;i++){",
		  "        inv[i]=mult(inv[i-1],pow_inv,M);",
		  "    }",
		  "",
		  "}",
		  "",
		  "void build(string s){",
		  "    ll n=s.size();",
		  "    for(ll i=0;i<n;i++){",
		  "        Hash[i]=add((i==0)? 0:Hash[i-1],mult(pw[i],s[i]-'a'+1,M),M); ",
		  "    }",
		  "",
		  "}",
		  "",
		  "ll getHash(ll x,ll y){",
		  "    ll res=add(Hash[y],(x==0) ? 0: -Hash[x-1],M);",
		  "    res=mult(res, (x==0) ? 1:inv[x-1],M);",
		  "    return res;",
		  "}"
		],
		"description": "string_hash"
	  }
}
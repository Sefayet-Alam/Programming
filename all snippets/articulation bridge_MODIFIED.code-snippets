{
	"articulation bridge_MODIFIED": {
		"prefix": "articulation bridge_MODIFIED",
		"body": [
		  "const ll sz = 1009;",
		  "vector<ll> g[sz];",
		  "ll low[sz], start[sz], TM = 1, root = 1;",
		  "bool artPoint[sz], vis[sz];",
		  "ordered_map<pll, ll> mpp;",
		  "vector<ll> par(sz, -1);",
		  "void artdfs(ll u, ll p)",
		  "{",
		  "    low[u] = start[u] = TM++;",
		  "    vis[u] = 1;",
		  "    ll child = 0; /// Counter of the children of u in dfs tree",
		  "    for (ll i = 0; i < g[u].size(); i++)",
		  "    {",
		  "        ll v = g[u][i];",
		  "        if (v == p)",
		  "            continue;",
		  "",
		  "        if (!vis[v])",
		  "        {",
		  "            par[v] = u;",
		  "            artdfs(v, u);",
		  "            low[u] = min(low[u], low[v]);",
		  "",
		  "            if (start[u] < low[v])",
		  "            {                       /// For articulation bridge: if(start[u] < low[v])",
		  "                artPoint[u] = true; /// the edge between u and v is an articulation bridge",
		  "                // if(u>v) swap(u,v);",
		  "                mpp[{u, v}] = mpp[{v, u}] = 1;",
		  "            }",
		  "            // if (mpp.find({v, u}) == mpp.end())",
		  "            //     mpp[{u, v}] = 1; // add this to find minimum no of edges to keep the graph connected",
		  "            child++;",
		  "        }",
		  "        else if (par[u] != v)",
		  "        {",
		  "            low[u] = min(low[u], start[v]);",
		  "            // if (mpp.find({v, u}) == mpp.end())",
		  "            //     mpp[{u, v}] = 1; // add this to find minimum no of edges to keep the graph connected",
		  "        }",
		  "    }",
		  "}",
		  "",
		  "// artdfs(root, -1)",
		  "void reset(ll n)",
		  "{",
		  "    TM = 1, root = 1;",
		  "    for (ll i = 0; i <= n + 2; i++)",
		  "    {",
		  "        g[i].clear();",
		  "        vis[i] = artPoint[i] = 0;",
		  "        low[i] = start[i] = 0;",
		  "        par[i] = -1;",
		  "    }",
		  "    mpp.clear();",
		  "}"
		],
		"description": "articulation bridge_MODIFIED"
	  }
}
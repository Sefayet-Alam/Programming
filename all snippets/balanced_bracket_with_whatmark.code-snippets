{
	"balanced_bracket_with_whatmark": {
		"prefix": "balanced_bracket_with_whatmark",
		"body": [
		  "bool canBeBalanced(string sequence)",
		  "{",
		  "    // If string can never be balanced",
		  "    if (sequence.size() % 2)",
		  "        return false;",
		  " ",
		  "    // Declare 2 stacks to check if all",
		  "    // ) can be balanced with ( or $",
		  "    // and vice-versa",
		  "    stack<char> stack_, stack2_;",
		  " ",
		  "    // Store the count the occurrence",
		  "    // of (, ) and $",
		  "    int countOpen = 0, countClosed = 0;",
		  "    int countSymbol = 0;",
		  " ",
		  "    // Traverse the string",
		  "    for (int i = 0;",
		  "         i < sequence.size(); i++) {",
		  " ",
		  "        if (sequence[i] == ')') {",
		  " ",
		  "            // Increment closed bracket",
		  "            // count by 1",
		  "            countClosed++;",
		  " ",
		  "            // If there are no opening",
		  "            // bracket to match it",
		  "            // then return false",
		  "            if (stack_.empty()) {",
		  "                return false;",
		  "            }",
		  " ",
		  "            // Otherwise, pop the character",
		  "            // from the stack",
		  "            else {",
		  "                stack_.pop();",
		  "            }",
		  "        }",
		  " ",
		  "        else {",
		  " ",
		  "            // If current character is",
		  "            // an opening bracket or $,",
		  "            // push it to the stack",
		  "            if (sequence[i] == '?') {",
		  " ",
		  "                // Increment symbol",
		  "                // count by 1",
		  "                countSymbol++;",
		  "            }",
		  "            else {",
		  " ",
		  "                // Increment open",
		  "                // bracket count by 1",
		  "                countOpen++;",
		  "            }",
		  "            stack_.push(sequence[i]);",
		  "        }",
		  "    }",
		  " ",
		  "    // Traverse the string from end",
		  "    // and repeat the same process",
		  "    for (int i = sequence.size() - 1;",
		  "         i >= 0; i--) {",
		  " ",
		  "        if (sequence[i] == '(') {",
		  " ",
		  "            // If there are no closing",
		  "            // brackets to match it",
		  "            if (stack2_.empty()) {",
		  "                return false;",
		  "            }",
		  " ",
		  "            // Otherwise, pop character",
		  "            // from stack",
		  "            else {",
		  "                stack2_.pop();",
		  "            }",
		  "        }",
		  "        else {",
		  "            stack2_.push(sequence[i]);",
		  "        }",
		  "    }",
		  " ",
		  "    // Store the extra ( or ) which",
		  "    // are not balanced yet",
		  "    int extra = abs(countClosed - countOpen);",
		  " ",
		  "    // Check if $ is available to",
		  "    // balance the extra brackets",
		  "    if (countSymbol < extra) {",
		  "        return false;",
		  "    }",
		  " ",
		  "    else {",
		  " ",
		  "        // Count ramaining $ after",
		  "        // balancing extra ( and )",
		  "        countSymbol -= extra;",
		  " ",
		  "        // Check if each pair of $",
		  "        // is convertible in ()",
		  "        if (countSymbol % 2 == 0) {",
		  "            return true;",
		  "        }",
		  "    }",
		  "    return false;",
		  "}",
		  " "
		],
		"description": "balanced_bracket_with_whatmark"
	  }
}
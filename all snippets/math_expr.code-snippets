{
	"": {
		"prefix": "mathmatical expression",
		"body": [
		  "bool isSpace(char c) {",
		  "    return (c==' ');",
		  "}",
		  "",
		  "bool is_op(char c) {",
		  "    return c=='+'||c=='-'||c=='*'||c=='/';",
		  "}",
		  "",
		  "bool is_unary(char c) {",
		  "    return c=='+'||c=='-';",
		  "}",
		  "",
		  "ll priority (char op) {",
		  "    if(op<0) return 4; // unary operator",
		  "    if(op=='+' || op=='-') return 1;",
		  "    if(op=='*') return 2;",
		  "    if(op=='/') return 3;",
		  "    return -1;",
		  "}",
		  "",
		  "void process_op(stack<ll>& st, char op) {",
		  "    if(op<0) {",
		  "        ll l=st.top();",
		  "        st.pop();",
		  "        switch(-op){",
		  "            case '+': st.push(l); break;",
		  "            case '-': st.push(-l); break;",
		  "        }",
		  "    }else {",
		  "        ll r=st.top();",
		  "        st.pop();",
		  "        ll l=st.top();",
		  "        st.pop();",
		  "        switch (op) {",
		  "            case '+': st.push(l+r); break;",
		  "            case '-': st.push(l-r); break;",
		  "            case '*': st.push(l*r); break;",
		  "            case '/': st.push(l/r); break;",
		  "        }",
		  "    }",
		  "}",
		  "",
		  "ll evaluate(string& s) {",
		  "    stack<ll> st;",
		  "    stack<char> op;",
		  "    bool has_unary = true;",
		  "    for (int i=0;i<SZ(s);i++) {",
		  "        if (isSpace(s[i])) continue;",
		  "        if (s[i]=='(') {",
		  "            op.push('(');",
		  "            has_unary=true;",
		  "        }else if(s[i]==')') {",
		  "            while (op.top()!='(') {",
		  "                process_op(st,op.top());",
		  "                op.pop();",
		  "            }",
		  "            op.pop();",
		  "            has_unary=false;",
		  "        }else if(is_op(s[i])) {",
		  "            char cur_op=s[i];",
		  "            if (has_unary && is_unary(cur_op))",
		  "                cur_op=-cur_op;",
		  "            while (!op.empty() && ((cur_op>=0 && priority(op.top())>=priority(cur_op)) ||(cur_op<0 && priority(op.top())>priority(cur_op)))) {",
		  "                process_op(st,op.top());",
		  "                op.pop();",
		  "            }",
		  "            op.push(cur_op);",
		  "            has_unary=true;",
		  "        }else{",
		  "            ll number=0;",
		  "            while(i<SZ(s) && isalnum(s[i])) number = number * 10 + s[i++] - '0';",
		  "            --i;",
		  "            st.push(number);",
		  "            has_unary=false;",
		  "        }",
		  "    }",
		  "",
		  "    while(!op.empty()) {",
		  "        process_op(st,op.top());",
		  "        op.pop();",
		  "    }",
		  "    return st.top();",
		  "}"
		],
		"description": ""
	  }
}
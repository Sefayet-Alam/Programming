{
	"tree_cutting to get maximum size CCs": {
		"prefix": "tree_cutting to get maximum size CCs",
		"body": [
		  "",
		  "bool vis[N];",
		  "ll level[N];",
		  "ll n,k;",
		  "vector<ll>g[N];",
		  "",
		  "ll curr,cmp;",
		  "ll dfs(int vertex,int par=-1){",
		  "    ",
		  "    ll sz=1;",
		  "    for(int child: g[vertex]){",
		  "       ",
		  "        if(child==par) continue;",
		  "        sz+=dfs(child,vertex);   ",
		  "    }",
		  "    if(sz>=curr){",
		  "        cmp++;",
		  "        return 0;",
		  "    }",
		  "   return sz;",
		  "}",
		  "void reset(ll n){",
		  "    for(ll i=0;i<=n;i++){",
		  "        g[i].clear();",
		  "        vis[i]=0;",
		  "        level[i]=0;",
		  "    }",
		  "  ",
		  "}",
		  "",
		  "bool func(ll pos){",
		  "    cmp=0;",
		  "    curr=pos;",
		  "    ll ret=dfs(1);",
		  "    return cmp>=k+1;",
		  "}",
		  "ll bs(ll low,ll high){",
		  "    ll mid;",
		  "    ll ans=0;",
		  "    while(low<=high){",
		  "        mid=low+(high-low)/2;",
		  "        //cout<<mid<<\" \"<<func(mid)<<endl;",
		  "        if(func(mid)){",
		  "            ans=mid;",
		  "             low=mid+1;",
		  "        }",
		  "        else{",
		  "            high=mid-1;",
		  "        }",
		  "    }",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "tree_cutting to get maximum size CCs"
	  }
}